import source2 from '../../examples/libmng/libmng_meta_main.png';

const data = {
  header: 'libmanage',
  images: [source2],
  icons: ['Icon 1'],
  comment: `
  # 목적 및 기능
  - 사용자의 스팀 라이브러리에 있는 게임의 메타 정보를 PC, 모바일 등 다양한 디바이스에서 설치할 수 있는 앱 형태로 제공

  # 주요 기술
  ## ※ Front-End
  ### ▷ React.js
  - 실력 향상을 위해 React.js를 사용하여 좀 더 규모가 큰 프로젝트를 진행하는 것을 목표로 삼았습니다.
  - 지난 프로젝트와 차별점을 두기 위해 다음과 같은 부분을 구현하는 데 집중했습니다.
    - 단순한 SPA에서 벗어나 PWA 형태를 선택했습니다. 설치가 가능한 앱 형태로 프로젝트를 만든다는 컨셉을 지키기 위해서입니다.
    - 지난 프로젝트에서 다루지 않았던 HTTP, Websocket 등을 사용한 통신을 구현했습니다.
  ### ▷ Emotion.js
  - 전체 프로젝트에 걸쳐 스타일 작성 방법을 최대한 통일시키는 것을 목표로 삼았습니다.
    - <button>, <input> 등 유사한 스타일의 특정 요소를 반환하는 컴포넌트는 Emotion.js의 Styled Components를 통해 코드 재사용성을 높였습니다.
    - Emotion.js의 css Property를 통해 작성하는 코드는 컴포넌트 최상단 요소에서 스타일을 작성하는 등, 작성 방법을 통일하여 유지·보수성을 높이는 것에 집중했습니다.
  ## ※ Back-End
  ### ▷ Express.js
  - 웹 앱의 작동 방식을 익히기 위해 백엔드 영역에 대한 이해도를 높이는 것을 목표로 삼았습니다.
    - 프론트엔드에서 요청이 어떤 형태로 전해지는지, 백엔드에서 어떤 형태로 응답이 돌아오는지를 알아야 더 효율적인 프로그래밍이 가능하리라 생각했기 때문입니다.
  - Express.js는 Node.js를 그대로 이용하는 것보다 라우터 구성이 직관적으로 느껴졌기 때문에, 백엔드 영역을 직접 구현하면서도 필요 이상으로 시간과 노력을 들이지 않을 수 있겠다는 판단이 들어 선택했습니다.
  ## ※ Database
  ### ▷ MySQL
  - 서비스 구현에 필요한 테이블을 설계하여 사용자 정보 등을 저장하였습니다.
    - 다양한 DB 중 MySQL을 선택한 이유는, SQL문 중 가장 기본이 되는 DB에 대한 경험을 쌓기 위해서입니다.
    - 이 경험을 기반으로 추후 MariaDB 등 다른 SQL문 기반 DB나 MongoDB 등 NoSQL DB에 대한 이해를 더 잘 할 수 있을 것이라 판단했습니다.
    
  # 기술적 고민
  ## > 해결한 문제
  ### ▷ 요약
  - 데이터 로딩 속도를 높이기 위해 제삼자 API 최적화 진행, 약 200개의 테스트 데이터를 한꺼번에 처리하는 대신 개별적으로 처리하도록 하여 데이터 표시 속도 40배 증가

  ### ▷ 문제 상황
  - 사용자의 Steam 보유 게임 목록을 검색해 받아온 메타 데이터를 사용자에게 표시하는 속도가 너무 느림
    - ▷ 설명
      - 메타 데이터는 {"id":0000,"age_ratings":[344,43418 ... }과 같은 형태(이하 raw 형태)로 제공되며, 이 중 사용자에게 표시할 데이터는 15가지임
      - 각각의 항목에 저장된 값은 api 제공 업체인 igdb.com에서 사용하는 값으로, 자세한 데이터 열람을 원할 경우 추가적인 요청이 필요함
        - 예를 들어 위 age_ratings의 344값이 무엇을 뜻하는지 알고 싶을 경우, [요청 주소]/age_ratings에 344값에 대한 검색 과정을 거쳐야 온전한 값을 얻을 수 있음
      - 테스트 환경(= 200개) 기준, raw 형태의 메타 데이터를 받아오는 시간 자체는 길지 않아 개별 쿼리 방식으로 DB에 저장함
      - 문제가 되는 부분은 DB에 저장된 raw 형태의 메타 데이터를 추가 요청으로 가공하는 과정을 거쳐 사용자에게 표시하는 부분임

  ### ▷ 접근 방법 및 해결
  - ▷ 원인 파악: api가 한 번에 처리하는 데이터 수가 너무 적음
    - 메타 데이터 제공 서비스인 igdb.com의 api는 초당 4건의 요청만 처리할 수 있기 때문임
    - 해당 비율을 넘어갈 경우 429 오류가 반환되며 메타 데이터를 가공하는 절차가 종료됨
  - ▷ 1차 해결안: 멀티 쿼리를 사용해 한 번에 받아오는 데이터양을 늘림
    - 멀티 쿼리는 igdb.com의 api가 제공하는 기능으로, 한 번에 다수의 요청을 처리하는 기능임
    - 멑리 쿼리를 사용하면 10개의 요청을 하나의 요청으로 처리할 수 있기 때문에, 초당 최대 40건의 요청을 처리할 수 있음
  - ▷ 2차 문제: 요청 목록의 응답을 전부 받아오기 전에 다음 절차로 넘어가 버림
    - 원인: forEach, setTimeout을 조합해 쿼리를 보내는 방식으로 코드를 구현했었는데, 루프 종료 조건을 데이터 수령이 아니라 변수 count의 값으로 설정했기 때문
    - 개발 당시에는 코드 구조를 최대한 변경하지 않고 문제를 해결하는 것을 우선순위로 삼았기 때문에, 임시로 마지막 요청을 한 번 더 보내는 것으로 진행함
  - ▷ 2차 해결안: Promise.all(Settled) → forEach + setTimeout 롤백
    - 각각의 쿼리는 Promise를 반환하므로, Promise.all(Settled)를 사용해 response를 한 번에 처리하고자 함
    - Promise.all(Settled) 적용 결과 목록의 첫 번째 항목의 데이터는 제대로 반환이 됐으나, 나머지 response는 값이 전부 undefined로 변하는 문제가 발생함
      - forEach 반복문 내부에서 Promise.all(Settled)를 사용했던 것이 원인으로 보임
    - 개발 당시 원인을 발견하지 못했고, 요청을 한 번 더 보내는 방식으로 요청이 누락되는 문제 자체는 해결됐기 때문에 forEach + setTimeout을 통한 개별 요청으로 롤백해 기능을 구현함
  - ▷ 3차 문제: 200개 데이터 처리에 시간이 너무 오래 걸림
    - 원인: 약 200개의 게임의 메타 데이터를 구성하는 개별 항목들에 대한 쿼리를 개별적으로 시행
    - 전체 메타 데이터 수령에 20분 이상 소요됨
  - ▷ 3차 해결안: 사용자가 특정 게임의 정보 열람을 위해 클릭할 때 데이터를 받아오도록 수정
    - 기존 방식
      - 전체 게임 목록 →
      raw 형태 메타 데이터 수령 →
      개별 데이터 쿼리 과정을 forEach + setTimeout을 사용해 개별적으로 진행
    - 개선 방식
      - 최초 열람 항목
        - ■ 사용자가 특정 게임을 선택 →
        forEach + setTimeout으로 Promise 배열 생성 →
        Promise.allSettled로 한 번에 처리 →
        메타 데이터 가공 후 사용자에 표시
        - ■ 가공된 데이터는 최초로 수령한 raw 형태 메타 데이터를 대신하여 DB에 저장
      - 중복 열람 항목
        - ■ 최초 열람 시점에 가공 및 저장된 메타 데이터를 DB에서 불러와 표시
  - 개선 결과
    - (최초 열람 항목) 메타 데이터 수령부터 표시까지 30초 소요되어 약 40배의 데이터 표시 속도 증가 효과

  ## > 해결이 필요한 문제
  ### ▷ 크로스 브라우징 문제
  - 문제: 사파리 브라우저에서 카테고리 목록 재정렬 기능이 오작동함
  - 예상 원인
    - 재정렬 기능은 Element.children을 사용해 드롭 대상의 부모 요소의 element nodes 목록을 배열로 변환한 후 배열 API를 조합하여 구현한 상태임
    - 배열 API는 드래그 요소의 드래그 시점의 인덱스를 사용하여 이용하고 있음
    - 목록의 위 → 아래 이동에서 드래그 요소가 자동으로 목록의 맨 아래로 가는 것으로 볼 때, 인덱스 계산 기능에 오류가 생긴 것으로 예상됨
  ### ▷ 최적화 문제
  1. 섬네일 리스트
    - 문제: 섬네일 리스트의 경우 목록을 표시할 때 모든 게임의 커버 이미지를 다운받기 때문에 초기 로딩이 발생함
    - 해결 방법: Windowing 기법 도입을 통해 리스트 표시 최적화
  2. 데이터 캐싱 문제
    - 문제: PWA 표시를 위해 웹 앱에 최초로 접속하는 경우, 새로고침이 한 번 발생하기 전까진 캐싱이 이뤄지지 않아 화면 표시에 오류가 발생함
    - 예상 원인: Service Worker의 최적화가 필요할 것으로 예상됨
  `,
  links: [
    {
      name: 'GITHUB\n(client)',
      address: 'https://github.com/godcl1623/libmanage-client'
    },
    {
      name: 'GITHUB\n(server)',
      address: 'https://github.com/godcl1623/libmanage-server'
    },
    {
      name: 'DEMO',
      address: 'https://godcl1623-libmanage.herokuapp.com'
    }
  ]
}

export default data;